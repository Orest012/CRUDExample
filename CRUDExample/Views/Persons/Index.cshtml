@model IEnumerable<PersonResponse>

@{
    ViewBag.Title = "Persons";
    string sort = "";
}
<form asp-action="Index" asp-controller="Persons  " method="get">
    <h1>Persons</h1>
    <h3><a href="~/persons/create">Create Person</a></h3>
    <h3><a asp-controller="Persons" asp-action="PersonsPDF">Download as PDF</a></h3>

@*     <h3><a asp-controller="Persons" asp-action="PersonsCSV">Download as CSV</a></h3>
 *@
    <h3><a asp-controller="Persons" asp-action="PersonsExcel">Download as Excel</a></h3>

    <div class="box flex">
        <div class="flex-1">
            <select class="form-input" name="searchBy">
                @foreach (var field in ViewBag.SearchFields)
                {
                    if (field.Key == ViewBag.CurrentSearchBy)
                    {
                        <option value="@field.Key" selected="selected">@field.Value</option>
                    }
                    else
                    {
                        <option value="@field.Key">@field.Value</option>
                    }

                }
                @* Eg: searchBy=PersonName&searchString=abc *@
            </select>
        </div>

        <div class="flex-1">
            <input type="search" id="Search" class="form-input" placeholder="Search" name="searchString" value="@ViewBag.CurrentSearchString" />
        </div>

        <div class="flex-1">
            <button class="button button-blue-back">Search</button>
            <a href="~/persons/index" class="link-hover">Clear all</a>
        </div>
    </div>

    <div>
        @* <div class="box flex">
            <div class="flex-1">
                <p> <strong> Sort by</strong>
                    <select class="new-form-input" name="sortOrder">
                    @foreach (var num in ViewBag.SortList)
                    {
                        if (num.Key == ViewBag.CurrentSortOrder)
                        {
                            <option value="@num.Key" selected="selected">@num.Value</option>
                            sort = Convert.ToString(num);
                        }
                        else
                        {
                            <option value="@num.Key">@num.Value</option>
                        }

                    }
                </select>
                </p>
            </div>
        </div> *@
    <table class="table w-100 mt">
        <thead>
            <tr>
                @*<th><a href="~/persons/index?searchBy=@ViewBag.CurrentSearchBy&searchString=@ViewBag.CurrentSearchString&sortBy=@nameof(PersonResponse.PersonName)&sortOrder=@sort">Person Name</a></th>*@
               @*  <th><button class="button-blue-back" sortBy=@nameof(PersonResponse.PersonName)>Person Name</button></th>
                <th><button class="button-blue-back"  sortBy=@nameof(PersonResponse.Email)>Email</button></th>
                <th><button class="button-blue-back" sortBy=@nameof(PersonResponse.DateOfBirth)>Date of Birth</button></th> *@
                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.PersonName) },
                { "DisplayName", "Person Name" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.Email) },
                { "DisplayName", "Email" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.DateOfBirth) },
                { "DisplayName", "Date of Birth" },
                })
                
                
                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.Age) },
                { "DisplayName", "Age" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.Gender) },
                { "DisplayName", "Gender" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.Country) },
                { "DisplayName", "Country" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.Address) },
                { "DisplayName", "Address" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.ReceiveNewsLetters) },
                { "DisplayName", "Receive News Letters" },
                })

                <th>Operation</th>
            </tr>
        </thead>
            
        <tbody>
            @foreach (PersonResponse person in Model)
            {
                <tr>
                    <td style="width:15%">@person.PersonName</td>
                    <td style="width:20%">@person.Email</td>
                    <td style="width:13%">@person.DateOfBirth?.ToString("dd MMM yyyy")</td>
                    <td style="width:9%">@person.Age</td>
                    <td style="width:9%">@person.Gender</td>
                    <td style="width:10%">@person.Country</td>
                    <td style="width:15%">@person.Address</td>
                    <td style="width:20%">@person.ReceiveNewsLetters</td>
                    <td style="width:20%" >
                        <a asp-controller="Persons" asp-action="Edit" asp-route-id="@person.PersonID">Edit</a>
                        <a asp-controller="Persons" asp-action="Delete" asp-route-id="@person.PersonID">Delete</a>
                    </td>
                </tr>
            }
            <tr></tr>
        </tbody>

    </table>
    </div>
</form>
